#!/usr/bin/env python3
"""
Hydrus Docker Deployment Script - Refactored Modular Version
Clean, modular architecture with separated concerns
"""

import sys
from pathlib import Path

# Add the hydrus-docker directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

from cli import CLIParser
from config import ConfigurationManager
from docker_manager import DockerManager
from system_detector import SystemDetector
from vscode_integration import VSCodeIntegration


class HydrusDockerDeployment:
    """Main orchestrator for Hydrus Docker deployment"""

    def __init__(self):
        self.script_dir = Path(
            __file__
        ).parent.parent.absolute()  # Go up to docker folder
        self.parent_dir = self.script_dir.parent
        self.rosbag_dir = self.parent_dir / "rosbags"

        # Initialize managers
        self.docker_manager = DockerManager(
            self.script_dir, self.parent_dir, self.rosbag_dir
        )
        self.config_manager = ConfigurationManager()

    def determine_active_configuration_group(self, args):
        """Determine which configuration group is active"""
        active_groups = [
            group
            for group in ConfigurationManager.get_available_groups()
            if getattr(
                args, group.replace("-", "_"), False
            )  # Convert hyphens to underscores
        ]
        return active_groups[0] if active_groups else None

    def build_final_configuration(self, args):
        """Build the final configuration from arguments and groups"""
        # Start with base configuration from arguments
        config = self.config_manager.create_base_config(args)

        # Apply configuration group if specified
        active_group = self.determine_active_configuration_group(args)
        if active_group:
            print(f"üîß Applying configuration group: {active_group}")
            config = self.config_manager.apply_configuration_group(active_group, config)
            print(f"üîß Configuration after applying {active_group}:")
            for key, value in config.items():
                if value:  # Only show enabled options
                    print(f"   {key} = {value}")
        else:
            print("üîß No configuration group specified, using individual flags")

        # Apply argument overrides (negation flags)
        config = self.config_manager.apply_argument_overrides(config, args)

        return config

    def handle_rosbag_requirements(self, config, args):
        """Handle rosbag download requirements"""
        if config["rosbag_playback"]:
            if not self.docker_manager.check_rosbags(args.download_rosbag):
                if not args.download_rosbag:
                    print("‚ùå Rosbag playback requested but no files found.")
                    print(
                        "üí° Use --download-rosbag to automatically download rosbag files."
                    )
                    sys.exit(1)

    def execute_action(self, args, compose_file):
        """Execute the specified action"""
        if args.exec:
            self.docker_manager.exec_into_container(compose_file)
        elif args.destroy:
            self.docker_manager.destroy_containers(compose_file)
        else:
            # Default action: deploy containers
            config = self.build_final_configuration(args)
            self.handle_rosbag_requirements(config, args)

            if args.force_jetson or SystemDetector.is_jetson_tx2():
                self.docker_manager.run_jetson_deployment()
            else:
                # Pass detach flag to docker manager
                self.docker_manager.run_docker_compose(
                    compose_file, config, detach=args.detach
                )

    def main(self):
        """Main execution function"""
        try:
            # Parse command line arguments
            parser = CLIParser.create_parser()
            args = parser.parse_args()

            # Validate arguments
            CLIParser.validate_arguments(args)

            # Determine compose file to use
            compose_file = SystemDetector.determine_compose_file(args)

            # Execute the requested action
            self.execute_action(args, compose_file)

        except ValueError as e:
            print(f"‚ùå Error: {e}")
            sys.exit(1)
        except KeyboardInterrupt:
            print("\nüõë Operation cancelled by user")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå Unexpected error: {e}")
            sys.exit(1)


if __name__ == "__main__":
    deployment = HydrusDockerDeployment()
    deployment.main()
